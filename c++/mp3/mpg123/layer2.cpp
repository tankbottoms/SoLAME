/* 
 * Mpeg Layer-2 audio decoder 
 * --------------------------
 * copyright (c) 1995 by Michael Hipp, All rights reserved. See also 'README'
 *
 */
#include "mpg123.h"
#include "getbits.h"
#include "options.h"

//#define INIT_TABLE_WRITE
#undef INIT_TABLE_WRITE

#ifdef INIT_TABLE_WRITE
#include <stdio.h>
#endif

static int grp_3tab[32 * 3] = { 0, };   /* used: 27 */
static int grp_5tab[128 * 3] = { 0, };  /* used: 125 */
static int grp_9tab[1024 * 3] = { 0, }; /* used: 729 */

#pragma warning(disable:4305)

real muls[27][64] = /* also used by layer 1 */
{
	{REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(-1.333333), REAL_FLOAT(-1.058267), REAL_FLOAT(-0.839947), REAL_FLOAT(-0.666667), REAL_FLOAT(-0.529134), REAL_FLOAT(-0.419974), REAL_FLOAT(-0.333333),
REAL_FLOAT(-0.264567), REAL_FLOAT(-0.209987), REAL_FLOAT(-0.166667), REAL_FLOAT(-0.132283), REAL_FLOAT(-0.104993), REAL_FLOAT(-0.083333), REAL_FLOAT(-0.066142),
REAL_FLOAT(-0.052497), REAL_FLOAT(-0.041667), REAL_FLOAT(-0.033071), REAL_FLOAT(-0.026248), REAL_FLOAT(-0.020833), REAL_FLOAT(-0.016535), REAL_FLOAT(-0.013124),
REAL_FLOAT(-0.010417), REAL_FLOAT(-0.008268), REAL_FLOAT(-0.006562), REAL_FLOAT(-0.005208), REAL_FLOAT(-0.004134), REAL_FLOAT(-0.003281), REAL_FLOAT(-0.002604),
REAL_FLOAT(-0.002067), REAL_FLOAT(-0.001641), REAL_FLOAT(-0.001302), REAL_FLOAT(-0.001033), REAL_FLOAT(-0.000820), REAL_FLOAT(-0.000651), REAL_FLOAT(-0.000517),
REAL_FLOAT(-0.000410), REAL_FLOAT(-0.000326), REAL_FLOAT(-0.000258), REAL_FLOAT(-0.000205), REAL_FLOAT(-0.000163), REAL_FLOAT(-0.000129), REAL_FLOAT(-0.000103),
REAL_FLOAT(-0.000081), REAL_FLOAT(-0.000065), REAL_FLOAT(-0.000051), REAL_FLOAT(-0.000041), REAL_FLOAT(-0.000032), REAL_FLOAT(-0.000026), REAL_FLOAT(-0.000020),
REAL_FLOAT(-0.000016), REAL_FLOAT(-0.000013), REAL_FLOAT(-0.000010), REAL_FLOAT(-0.000008), REAL_FLOAT(-0.000006), REAL_FLOAT(-0.000005), REAL_FLOAT(-0.000004),
REAL_FLOAT(-0.000003), REAL_FLOAT(-0.000003), REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001),
REAL_ZERO },
	{REAL_FLOAT(1.333333), REAL_FLOAT(1.058267), REAL_FLOAT(0.839947), REAL_FLOAT(0.666667), REAL_FLOAT(0.529134), REAL_FLOAT(0.419974), REAL_FLOAT(0.333333),
REAL_FLOAT(0.264567), REAL_FLOAT(0.209987), REAL_FLOAT(0.166667), REAL_FLOAT(0.132283), REAL_FLOAT(0.104993), REAL_FLOAT(0.083333), REAL_FLOAT(0.066142),
REAL_FLOAT(0.052497), REAL_FLOAT(0.041667), REAL_FLOAT(0.033071), REAL_FLOAT(0.026248), REAL_FLOAT(0.020833), REAL_FLOAT(0.016535), REAL_FLOAT(0.013124),
REAL_FLOAT(0.010417), REAL_FLOAT(0.008268), REAL_FLOAT(0.006562), REAL_FLOAT(0.005208), REAL_FLOAT(0.004134), REAL_FLOAT(0.003281), REAL_FLOAT(0.002604),
REAL_FLOAT(0.002067), REAL_FLOAT(0.001641), REAL_FLOAT(0.001302), REAL_FLOAT(0.001033), REAL_FLOAT(0.000820), REAL_FLOAT(0.000651), REAL_FLOAT(0.000517),
REAL_FLOAT(0.000410), REAL_FLOAT(0.000326), REAL_FLOAT(0.000258), REAL_FLOAT(0.000205), REAL_FLOAT(0.000163), REAL_FLOAT(0.000129), REAL_FLOAT(0.000103),
REAL_FLOAT(0.000081), REAL_FLOAT(0.000065), REAL_FLOAT(0.000051), REAL_FLOAT(0.000041), REAL_FLOAT(0.000032), REAL_FLOAT(0.000026), REAL_FLOAT(0.000020),
REAL_FLOAT(0.000016), REAL_FLOAT(0.000013), REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004),
REAL_FLOAT(0.000003), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001),
REAL_ZERO },
	{REAL_FLOAT(0.571429), REAL_FLOAT(0.453543), REAL_FLOAT(0.359977), REAL_FLOAT(0.285714), REAL_FLOAT(0.226772), REAL_FLOAT(0.179989), REAL_FLOAT(0.142857),
REAL_FLOAT(0.113386), REAL_FLOAT(0.089994), REAL_FLOAT(0.071429), REAL_FLOAT(0.056693), REAL_FLOAT(0.044997), REAL_FLOAT(0.035714), REAL_FLOAT(0.028346),
REAL_FLOAT(0.022499), REAL_FLOAT(0.017857), REAL_FLOAT(0.014173), REAL_FLOAT(0.011249), REAL_FLOAT(0.008929), REAL_FLOAT(0.007087), REAL_FLOAT(0.005625),
REAL_FLOAT(0.004464), REAL_FLOAT(0.003543), REAL_FLOAT(0.002812), REAL_FLOAT(0.002232), REAL_FLOAT(0.001772), REAL_FLOAT(0.001406), REAL_FLOAT(0.001116),
REAL_FLOAT(0.000886), REAL_FLOAT(0.000703), REAL_FLOAT(0.000558), REAL_FLOAT(0.000443), REAL_FLOAT(0.000352), REAL_FLOAT(0.000279), REAL_FLOAT(0.000221),
REAL_FLOAT(0.000176), REAL_FLOAT(0.000140), REAL_FLOAT(0.000111), REAL_FLOAT(0.000088), REAL_FLOAT(0.000070), REAL_FLOAT(0.000055), REAL_FLOAT(0.000044),
REAL_FLOAT(0.000035), REAL_FLOAT(0.000028), REAL_FLOAT(0.000022), REAL_FLOAT(0.000017), REAL_FLOAT(0.000014), REAL_FLOAT(0.000011), REAL_FLOAT(0.000009),
REAL_FLOAT(0.000007), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002),
REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.266667), REAL_FLOAT(0.211653), REAL_FLOAT(0.167989), REAL_FLOAT(0.133333), REAL_FLOAT(0.105827), REAL_FLOAT(0.083995), REAL_FLOAT(0.066667),
REAL_FLOAT(0.052913), REAL_FLOAT(0.041997), REAL_FLOAT(0.033333), REAL_FLOAT(0.026457), REAL_FLOAT(0.020999), REAL_FLOAT(0.016667), REAL_FLOAT(0.013228),
REAL_FLOAT(0.010499), REAL_FLOAT(0.008333), REAL_FLOAT(0.006614), REAL_FLOAT(0.005250), REAL_FLOAT(0.004167), REAL_FLOAT(0.003307), REAL_FLOAT(0.002625),
REAL_FLOAT(0.002083), REAL_FLOAT(0.001654), REAL_FLOAT(0.001312), REAL_FLOAT(0.001042), REAL_FLOAT(0.000827), REAL_FLOAT(0.000656), REAL_FLOAT(0.000521),
REAL_FLOAT(0.000413), REAL_FLOAT(0.000328), REAL_FLOAT(0.000260), REAL_FLOAT(0.000207), REAL_FLOAT(0.000164), REAL_FLOAT(0.000130), REAL_FLOAT(0.000103),
REAL_FLOAT(0.000082), REAL_FLOAT(0.000065), REAL_FLOAT(0.000052), REAL_FLOAT(0.000041), REAL_FLOAT(0.000033), REAL_FLOAT(0.000026), REAL_FLOAT(0.000021),
REAL_FLOAT(0.000016), REAL_FLOAT(0.000013), REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004),
REAL_FLOAT(0.000003), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001),
REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.129032), REAL_FLOAT(0.102413), REAL_FLOAT(0.081285), REAL_FLOAT(0.064516), REAL_FLOAT(0.051206), REAL_FLOAT(0.040643), REAL_FLOAT(0.032258),
REAL_FLOAT(0.025603), REAL_FLOAT(0.020321), REAL_FLOAT(0.016129), REAL_FLOAT(0.012802), REAL_FLOAT(0.010161), REAL_FLOAT(0.008065), REAL_FLOAT(0.006401),
REAL_FLOAT(0.005080), REAL_FLOAT(0.004032), REAL_FLOAT(0.003200), REAL_FLOAT(0.002540), REAL_FLOAT(0.002016), REAL_FLOAT(0.001600), REAL_FLOAT(0.001270),
REAL_FLOAT(0.001008), REAL_FLOAT(0.000800), REAL_FLOAT(0.000635), REAL_FLOAT(0.000504), REAL_FLOAT(0.000400), REAL_FLOAT(0.000318), REAL_FLOAT(0.000252),
REAL_FLOAT(0.000200), REAL_FLOAT(0.000159), REAL_FLOAT(0.000126), REAL_FLOAT(0.000100), REAL_FLOAT(0.000079), REAL_FLOAT(0.000063), REAL_FLOAT(0.000050),
REAL_FLOAT(0.000040), REAL_FLOAT(0.000032), REAL_FLOAT(0.000025), REAL_FLOAT(0.000020), REAL_FLOAT(0.000016), REAL_FLOAT(0.000013), REAL_FLOAT(0.000010),
REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002),
REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.063492), REAL_FLOAT(0.050394), REAL_FLOAT(0.039997), REAL_FLOAT(0.031746), REAL_FLOAT(0.025197), REAL_FLOAT(0.019999), REAL_FLOAT(0.015873),
REAL_FLOAT(0.012598), REAL_FLOAT(0.009999), REAL_FLOAT(0.007937), REAL_FLOAT(0.006299), REAL_FLOAT(0.005000), REAL_FLOAT(0.003968), REAL_FLOAT(0.003150),
REAL_FLOAT(0.002500), REAL_FLOAT(0.001984), REAL_FLOAT(0.001575), REAL_FLOAT(0.001250), REAL_FLOAT(0.000992), REAL_FLOAT(0.000787), REAL_FLOAT(0.000625),
REAL_FLOAT(0.000496), REAL_FLOAT(0.000394), REAL_FLOAT(0.000312), REAL_FLOAT(0.000248), REAL_FLOAT(0.000197), REAL_FLOAT(0.000156), REAL_FLOAT(0.000124),
REAL_FLOAT(0.000098), REAL_FLOAT(0.000078), REAL_FLOAT(0.000062), REAL_FLOAT(0.000049), REAL_FLOAT(0.000039), REAL_FLOAT(0.000031), REAL_FLOAT(0.000025),
REAL_FLOAT(0.000020), REAL_FLOAT(0.000016), REAL_FLOAT(0.000012), REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005),
REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001),
REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.031496), REAL_FLOAT(0.024998), REAL_FLOAT(0.019841), REAL_FLOAT(0.015748), REAL_FLOAT(0.012499), REAL_FLOAT(0.009921), REAL_FLOAT(0.007874),
REAL_FLOAT(0.006250), REAL_FLOAT(0.004960), REAL_FLOAT(0.003937), REAL_FLOAT(0.003125), REAL_FLOAT(0.002480), REAL_FLOAT(0.001969), REAL_FLOAT(0.001562),
REAL_FLOAT(0.001240), REAL_FLOAT(0.000984), REAL_FLOAT(0.000781), REAL_FLOAT(0.000620), REAL_FLOAT(0.000492), REAL_FLOAT(0.000391), REAL_FLOAT(0.000310),
REAL_FLOAT(0.000246), REAL_FLOAT(0.000195), REAL_FLOAT(0.000155), REAL_FLOAT(0.000123), REAL_FLOAT(0.000098), REAL_FLOAT(0.000078), REAL_FLOAT(0.000062),
REAL_FLOAT(0.000049), REAL_FLOAT(0.000039), REAL_FLOAT(0.000031), REAL_FLOAT(0.000024), REAL_FLOAT(0.000019), REAL_FLOAT(0.000015), REAL_FLOAT(0.000012),
REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002),
REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.015686), REAL_FLOAT(0.012450), REAL_FLOAT(0.009882), REAL_FLOAT(0.007843), REAL_FLOAT(0.006225), REAL_FLOAT(0.004941), REAL_FLOAT(0.003922),
REAL_FLOAT(0.003113), REAL_FLOAT(0.002470), REAL_FLOAT(0.001961), REAL_FLOAT(0.001556), REAL_FLOAT(0.001235), REAL_FLOAT(0.000980), REAL_FLOAT(0.000778),
REAL_FLOAT(0.000618), REAL_FLOAT(0.000490), REAL_FLOAT(0.000389), REAL_FLOAT(0.000309), REAL_FLOAT(0.000245), REAL_FLOAT(0.000195), REAL_FLOAT(0.000154),
REAL_FLOAT(0.000123), REAL_FLOAT(0.000097), REAL_FLOAT(0.000077), REAL_FLOAT(0.000061), REAL_FLOAT(0.000049), REAL_FLOAT(0.000039), REAL_FLOAT(0.000031),
REAL_FLOAT(0.000024), REAL_FLOAT(0.000019), REAL_FLOAT(0.000015), REAL_FLOAT(0.000012), REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006),
REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001),
REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.007828), REAL_FLOAT(0.006213), REAL_FLOAT(0.004931), REAL_FLOAT(0.003914), REAL_FLOAT(0.003106), REAL_FLOAT(0.002466), REAL_FLOAT(0.001957),
REAL_FLOAT(0.001553), REAL_FLOAT(0.001233), REAL_FLOAT(0.000978), REAL_FLOAT(0.000777), REAL_FLOAT(0.000616), REAL_FLOAT(0.000489), REAL_FLOAT(0.000388),
REAL_FLOAT(0.000308), REAL_FLOAT(0.000245), REAL_FLOAT(0.000194), REAL_FLOAT(0.000154), REAL_FLOAT(0.000122), REAL_FLOAT(0.000097), REAL_FLOAT(0.000077),
REAL_FLOAT(0.000061), REAL_FLOAT(0.000049), REAL_FLOAT(0.000039), REAL_FLOAT(0.000031), REAL_FLOAT(0.000024), REAL_FLOAT(0.000019), REAL_FLOAT(0.000015),
REAL_FLOAT(0.000012), REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003),
REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001),
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.003910), REAL_FLOAT(0.003103), REAL_FLOAT(0.002463), REAL_FLOAT(0.001955), REAL_FLOAT(0.001552), REAL_FLOAT(0.001232), REAL_FLOAT(0.000978),
REAL_FLOAT(0.000776), REAL_FLOAT(0.000616), REAL_FLOAT(0.000489), REAL_FLOAT(0.000388), REAL_FLOAT(0.000308), REAL_FLOAT(0.000244), REAL_FLOAT(0.000194),
REAL_FLOAT(0.000154), REAL_FLOAT(0.000122), REAL_FLOAT(0.000097), REAL_FLOAT(0.000077), REAL_FLOAT(0.000061), REAL_FLOAT(0.000048), REAL_FLOAT(0.000038),
REAL_FLOAT(0.000031), REAL_FLOAT(0.000024), REAL_FLOAT(0.000019), REAL_FLOAT(0.000015), REAL_FLOAT(0.000012), REAL_FLOAT(0.000010), REAL_FLOAT(0.000008),
REAL_FLOAT(0.000006), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002),
REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.001954), REAL_FLOAT(0.001551), REAL_FLOAT(0.001231), REAL_FLOAT(0.000977), REAL_FLOAT(0.000775), REAL_FLOAT(0.000615), REAL_FLOAT(0.000489),
REAL_FLOAT(0.000388), REAL_FLOAT(0.000308), REAL_FLOAT(0.000244), REAL_FLOAT(0.000194), REAL_FLOAT(0.000154), REAL_FLOAT(0.000122), REAL_FLOAT(0.000097),
REAL_FLOAT(0.000077), REAL_FLOAT(0.000061), REAL_FLOAT(0.000048), REAL_FLOAT(0.000038), REAL_FLOAT(0.000031), REAL_FLOAT(0.000024), REAL_FLOAT(0.000019),
REAL_FLOAT(0.000015), REAL_FLOAT(0.000012), REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004),
REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001),
REAL_FLOAT(0.000001), REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.000977), REAL_FLOAT(0.000775), REAL_FLOAT(0.000615), REAL_FLOAT(0.000488), REAL_FLOAT(0.000388), REAL_FLOAT(0.000308), REAL_FLOAT(0.000244),
REAL_FLOAT(0.000194), REAL_FLOAT(0.000154), REAL_FLOAT(0.000122), REAL_FLOAT(0.000097), REAL_FLOAT(0.000077), REAL_FLOAT(0.000061), REAL_FLOAT(0.000048),
REAL_FLOAT(0.000038), REAL_FLOAT(0.000031), REAL_FLOAT(0.000024), REAL_FLOAT(0.000019), REAL_FLOAT(0.000015), REAL_FLOAT(0.000012), REAL_FLOAT(0.000010),
REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002),
REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.000488), REAL_FLOAT(0.000388), REAL_FLOAT(0.000308), REAL_FLOAT(0.000244), REAL_FLOAT(0.000194), REAL_FLOAT(0.000154), REAL_FLOAT(0.000122),
REAL_FLOAT(0.000097), REAL_FLOAT(0.000077), REAL_FLOAT(0.000061), REAL_FLOAT(0.000048), REAL_FLOAT(0.000038), REAL_FLOAT(0.000031), REAL_FLOAT(0.000024),
REAL_FLOAT(0.000019), REAL_FLOAT(0.000015), REAL_FLOAT(0.000012), REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005),
REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001),
REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.000244), REAL_FLOAT(0.000194), REAL_FLOAT(0.000154), REAL_FLOAT(0.000122), REAL_FLOAT(0.000097), REAL_FLOAT(0.000077), REAL_FLOAT(0.000061),
REAL_FLOAT(0.000048), REAL_FLOAT(0.000038), REAL_FLOAT(0.000031), REAL_FLOAT(0.000024), REAL_FLOAT(0.000019), REAL_FLOAT(0.000015), REAL_FLOAT(0.000012),
REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002),
REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.000122), REAL_FLOAT(0.000097), REAL_FLOAT(0.000077), REAL_FLOAT(0.000061), REAL_FLOAT(0.000048), REAL_FLOAT(0.000038), REAL_FLOAT(0.000031),
REAL_FLOAT(0.000024), REAL_FLOAT(0.000019), REAL_FLOAT(0.000015), REAL_FLOAT(0.000012), REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006),
REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001),
REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.000061), REAL_FLOAT(0.000048), REAL_FLOAT(0.000038), REAL_FLOAT(0.000031), REAL_FLOAT(0.000024), REAL_FLOAT(0.000019), REAL_FLOAT(0.000015),
REAL_FLOAT(0.000012), REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003),
REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001),
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(-1.600000), REAL_FLOAT(-1.269921), REAL_FLOAT(-1.007937), REAL_FLOAT(-0.800000), REAL_FLOAT(-0.634960), REAL_FLOAT(-0.503968), REAL_FLOAT(-0.400000),
REAL_FLOAT(-0.317480), REAL_FLOAT(-0.251984), REAL_FLOAT(-0.200000), REAL_FLOAT(-0.158740), REAL_FLOAT(-0.125992), REAL_FLOAT(-0.100000), REAL_FLOAT(-0.079370),
REAL_FLOAT(-0.062996), REAL_FLOAT(-0.050000), REAL_FLOAT(-0.039685), REAL_FLOAT(-0.031498), REAL_FLOAT(-0.025000), REAL_FLOAT(-0.019843), REAL_FLOAT(-0.015749),
REAL_FLOAT(-0.012500), REAL_FLOAT(-0.009921), REAL_FLOAT(-0.007875), REAL_FLOAT(-0.006250), REAL_FLOAT(-0.004961), REAL_FLOAT(-0.003937), REAL_FLOAT(-0.003125),
REAL_FLOAT(-0.002480), REAL_FLOAT(-0.001969), REAL_FLOAT(-0.001563), REAL_FLOAT(-0.001240), REAL_FLOAT(-0.000984), REAL_FLOAT(-0.000781), REAL_FLOAT(-0.000620),
REAL_FLOAT(-0.000492), REAL_FLOAT(-0.000391), REAL_FLOAT(-0.000310), REAL_FLOAT(-0.000246), REAL_FLOAT(-0.000195), REAL_FLOAT(-0.000155), REAL_FLOAT(-0.000123),
REAL_FLOAT(-0.000098), REAL_FLOAT(-0.000078), REAL_FLOAT(-0.000062), REAL_FLOAT(-0.000049), REAL_FLOAT(-0.000039), REAL_FLOAT(-0.000031), REAL_FLOAT(-0.000024),
REAL_FLOAT(-0.000019), REAL_FLOAT(-0.000015), REAL_FLOAT(-0.000012), REAL_FLOAT(-0.000010), REAL_FLOAT(-0.000008), REAL_FLOAT(-0.000006), REAL_FLOAT(-0.000005),
REAL_FLOAT(-0.000004), REAL_FLOAT(-0.000003), REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001),
REAL_ZERO },
	{REAL_FLOAT(-0.800000), REAL_FLOAT(-0.634960), REAL_FLOAT(-0.503968), REAL_FLOAT(-0.400000), REAL_FLOAT(-0.317480), REAL_FLOAT(-0.251984), REAL_FLOAT(-0.200000),
REAL_FLOAT(-0.158740), REAL_FLOAT(-0.125992), REAL_FLOAT(-0.100000), REAL_FLOAT(-0.079370), REAL_FLOAT(-0.062996), REAL_FLOAT(-0.050000), REAL_FLOAT(-0.039685),
REAL_FLOAT(-0.031498), REAL_FLOAT(-0.025000), REAL_FLOAT(-0.019843), REAL_FLOAT(-0.015749), REAL_FLOAT(-0.012500), REAL_FLOAT(-0.009921), REAL_FLOAT(-0.007875),
REAL_FLOAT(-0.006250), REAL_FLOAT(-0.004961), REAL_FLOAT(-0.003937), REAL_FLOAT(-0.003125), REAL_FLOAT(-0.002480), REAL_FLOAT(-0.001969), REAL_FLOAT(-0.001563),
REAL_FLOAT(-0.001240), REAL_FLOAT(-0.000984), REAL_FLOAT(-0.000781), REAL_FLOAT(-0.000620), REAL_FLOAT(-0.000492), REAL_FLOAT(-0.000391), REAL_FLOAT(-0.000310),
REAL_FLOAT(-0.000246), REAL_FLOAT(-0.000195), REAL_FLOAT(-0.000155), REAL_FLOAT(-0.000123), REAL_FLOAT(-0.000098), REAL_FLOAT(-0.000078), REAL_FLOAT(-0.000062),
REAL_FLOAT(-0.000049), REAL_FLOAT(-0.000039), REAL_FLOAT(-0.000031), REAL_FLOAT(-0.000024), REAL_FLOAT(-0.000019), REAL_FLOAT(-0.000015), REAL_FLOAT(-0.000012),
REAL_FLOAT(-0.000010), REAL_FLOAT(-0.000008), REAL_FLOAT(-0.000006), REAL_FLOAT(-0.000005), REAL_FLOAT(-0.000004), REAL_FLOAT(-0.000003), REAL_FLOAT(-0.000002),
REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000000),
REAL_ZERO },
	{REAL_FLOAT(0.800000), REAL_FLOAT(0.634960), REAL_FLOAT(0.503968), REAL_FLOAT(0.400000), REAL_FLOAT(0.317480), REAL_FLOAT(0.251984), REAL_FLOAT(0.200000),
REAL_FLOAT(0.158740), REAL_FLOAT(0.125992), REAL_FLOAT(0.100000), REAL_FLOAT(0.079370), REAL_FLOAT(0.062996), REAL_FLOAT(0.050000), REAL_FLOAT(0.039685),
REAL_FLOAT(0.031498), REAL_FLOAT(0.025000), REAL_FLOAT(0.019843), REAL_FLOAT(0.015749), REAL_FLOAT(0.012500), REAL_FLOAT(0.009921), REAL_FLOAT(0.007875),
REAL_FLOAT(0.006250), REAL_FLOAT(0.004961), REAL_FLOAT(0.003937), REAL_FLOAT(0.003125), REAL_FLOAT(0.002480), REAL_FLOAT(0.001969), REAL_FLOAT(0.001563),
REAL_FLOAT(0.001240), REAL_FLOAT(0.000984), REAL_FLOAT(0.000781), REAL_FLOAT(0.000620), REAL_FLOAT(0.000492), REAL_FLOAT(0.000391), REAL_FLOAT(0.000310),
REAL_FLOAT(0.000246), REAL_FLOAT(0.000195), REAL_FLOAT(0.000155), REAL_FLOAT(0.000123), REAL_FLOAT(0.000098), REAL_FLOAT(0.000078), REAL_FLOAT(0.000062),
REAL_FLOAT(0.000049), REAL_FLOAT(0.000039), REAL_FLOAT(0.000031), REAL_FLOAT(0.000024), REAL_FLOAT(0.000019), REAL_FLOAT(0.000015), REAL_FLOAT(0.000012),
REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002),
REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(1.600000), REAL_FLOAT(1.269921), REAL_FLOAT(1.007937), REAL_FLOAT(0.800000), REAL_FLOAT(0.634960), REAL_FLOAT(0.503968), REAL_FLOAT(0.400000),
REAL_FLOAT(0.317480), REAL_FLOAT(0.251984), REAL_FLOAT(0.200000), REAL_FLOAT(0.158740), REAL_FLOAT(0.125992), REAL_FLOAT(0.100000), REAL_FLOAT(0.079370),
REAL_FLOAT(0.062996), REAL_FLOAT(0.050000), REAL_FLOAT(0.039685), REAL_FLOAT(0.031498), REAL_FLOAT(0.025000), REAL_FLOAT(0.019843), REAL_FLOAT(0.015749),
REAL_FLOAT(0.012500), REAL_FLOAT(0.009921), REAL_FLOAT(0.007875), REAL_FLOAT(0.006250), REAL_FLOAT(0.004961), REAL_FLOAT(0.003937), REAL_FLOAT(0.003125),
REAL_FLOAT(0.002480), REAL_FLOAT(0.001969), REAL_FLOAT(0.001563), REAL_FLOAT(0.001240), REAL_FLOAT(0.000984), REAL_FLOAT(0.000781), REAL_FLOAT(0.000620),
REAL_FLOAT(0.000492), REAL_FLOAT(0.000391), REAL_FLOAT(0.000310), REAL_FLOAT(0.000246), REAL_FLOAT(0.000195), REAL_FLOAT(0.000155), REAL_FLOAT(0.000123),
REAL_FLOAT(0.000098), REAL_FLOAT(0.000078), REAL_FLOAT(0.000062), REAL_FLOAT(0.000049), REAL_FLOAT(0.000039), REAL_FLOAT(0.000031), REAL_FLOAT(0.000024),
REAL_FLOAT(0.000019), REAL_FLOAT(0.000015), REAL_FLOAT(0.000012), REAL_FLOAT(0.000010), REAL_FLOAT(0.000008), REAL_FLOAT(0.000006), REAL_FLOAT(0.000005),
REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001),
REAL_ZERO },
	{REAL_FLOAT(-1.777778), REAL_FLOAT(-1.411023), REAL_FLOAT(-1.119930), REAL_FLOAT(-0.888889), REAL_FLOAT(-0.705512), REAL_FLOAT(-0.559965), REAL_FLOAT(-0.444444),
REAL_FLOAT(-0.352756), REAL_FLOAT(-0.279982), REAL_FLOAT(-0.222222), REAL_FLOAT(-0.176378), REAL_FLOAT(-0.139991), REAL_FLOAT(-0.111111), REAL_FLOAT(-0.088189),
REAL_FLOAT(-0.069996), REAL_FLOAT(-0.055556), REAL_FLOAT(-0.044094), REAL_FLOAT(-0.034998), REAL_FLOAT(-0.027778), REAL_FLOAT(-0.022047), REAL_FLOAT(-0.017499),
REAL_FLOAT(-0.013889), REAL_FLOAT(-0.011024), REAL_FLOAT(-0.008749), REAL_FLOAT(-0.006944), REAL_FLOAT(-0.005512), REAL_FLOAT(-0.004375), REAL_FLOAT(-0.003472),
REAL_FLOAT(-0.002756), REAL_FLOAT(-0.002187), REAL_FLOAT(-0.001736), REAL_FLOAT(-0.001378), REAL_FLOAT(-0.001094), REAL_FLOAT(-0.000868), REAL_FLOAT(-0.000689),
REAL_FLOAT(-0.000547), REAL_FLOAT(-0.000434), REAL_FLOAT(-0.000344), REAL_FLOAT(-0.000273), REAL_FLOAT(-0.000217), REAL_FLOAT(-0.000172), REAL_FLOAT(-0.000137),
REAL_FLOAT(-0.000109), REAL_FLOAT(-0.000086), REAL_FLOAT(-0.000068), REAL_FLOAT(-0.000054), REAL_FLOAT(-0.000043), REAL_FLOAT(-0.000034), REAL_FLOAT(-0.000027),
REAL_FLOAT(-0.000022), REAL_FLOAT(-0.000017), REAL_FLOAT(-0.000014), REAL_FLOAT(-0.000011), REAL_FLOAT(-0.000009), REAL_FLOAT(-0.000007), REAL_FLOAT(-0.000005),
REAL_FLOAT(-0.000004), REAL_FLOAT(-0.000003), REAL_FLOAT(-0.000003), REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001),
REAL_ZERO },
	{REAL_FLOAT(-0.888889), REAL_FLOAT(-0.705512), REAL_FLOAT(-0.559965), REAL_FLOAT(-0.444444), REAL_FLOAT(-0.352756), REAL_FLOAT(-0.279982), REAL_FLOAT(-0.222222),
REAL_FLOAT(-0.176378), REAL_FLOAT(-0.139991), REAL_FLOAT(-0.111111), REAL_FLOAT(-0.088189), REAL_FLOAT(-0.069996), REAL_FLOAT(-0.055556), REAL_FLOAT(-0.044094),
REAL_FLOAT(-0.034998), REAL_FLOAT(-0.027778), REAL_FLOAT(-0.022047), REAL_FLOAT(-0.017499), REAL_FLOAT(-0.013889), REAL_FLOAT(-0.011024), REAL_FLOAT(-0.008749),
REAL_FLOAT(-0.006944), REAL_FLOAT(-0.005512), REAL_FLOAT(-0.004375), REAL_FLOAT(-0.003472), REAL_FLOAT(-0.002756), REAL_FLOAT(-0.002187), REAL_FLOAT(-0.001736),
REAL_FLOAT(-0.001378), REAL_FLOAT(-0.001094), REAL_FLOAT(-0.000868), REAL_FLOAT(-0.000689), REAL_FLOAT(-0.000547), REAL_FLOAT(-0.000434), REAL_FLOAT(-0.000344),
REAL_FLOAT(-0.000273), REAL_FLOAT(-0.000217), REAL_FLOAT(-0.000172), REAL_FLOAT(-0.000137), REAL_FLOAT(-0.000109), REAL_FLOAT(-0.000086), REAL_FLOAT(-0.000068),
REAL_FLOAT(-0.000054), REAL_FLOAT(-0.000043), REAL_FLOAT(-0.000034), REAL_FLOAT(-0.000027), REAL_FLOAT(-0.000022), REAL_FLOAT(-0.000017), REAL_FLOAT(-0.000014),
REAL_FLOAT(-0.000011), REAL_FLOAT(-0.000009), REAL_FLOAT(-0.000007), REAL_FLOAT(-0.000005), REAL_FLOAT(-0.000004), REAL_FLOAT(-0.000003), REAL_FLOAT(-0.000003),
REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001),
REAL_ZERO },
	{REAL_FLOAT(-0.444444), REAL_FLOAT(-0.352756), REAL_FLOAT(-0.279982), REAL_FLOAT(-0.222222), REAL_FLOAT(-0.176378), REAL_FLOAT(-0.139991), REAL_FLOAT(-0.111111),
REAL_FLOAT(-0.088189), REAL_FLOAT(-0.069996), REAL_FLOAT(-0.055556), REAL_FLOAT(-0.044094), REAL_FLOAT(-0.034998), REAL_FLOAT(-0.027778), REAL_FLOAT(-0.022047),
REAL_FLOAT(-0.017499), REAL_FLOAT(-0.013889), REAL_FLOAT(-0.011024), REAL_FLOAT(-0.008749), REAL_FLOAT(-0.006944), REAL_FLOAT(-0.005512), REAL_FLOAT(-0.004375),
REAL_FLOAT(-0.003472), REAL_FLOAT(-0.002756), REAL_FLOAT(-0.002187), REAL_FLOAT(-0.001736), REAL_FLOAT(-0.001378), REAL_FLOAT(-0.001094), REAL_FLOAT(-0.000868),
REAL_FLOAT(-0.000689), REAL_FLOAT(-0.000547), REAL_FLOAT(-0.000434), REAL_FLOAT(-0.000344), REAL_FLOAT(-0.000273), REAL_FLOAT(-0.000217), REAL_FLOAT(-0.000172),
REAL_FLOAT(-0.000137), REAL_FLOAT(-0.000109), REAL_FLOAT(-0.000086), REAL_FLOAT(-0.000068), REAL_FLOAT(-0.000054), REAL_FLOAT(-0.000043), REAL_FLOAT(-0.000034),
REAL_FLOAT(-0.000027), REAL_FLOAT(-0.000022), REAL_FLOAT(-0.000017), REAL_FLOAT(-0.000014), REAL_FLOAT(-0.000011), REAL_FLOAT(-0.000009), REAL_FLOAT(-0.000007),
REAL_FLOAT(-0.000005), REAL_FLOAT(-0.000004), REAL_FLOAT(-0.000003), REAL_FLOAT(-0.000003), REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000002), REAL_FLOAT(-0.000001),
REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000001), REAL_FLOAT(-0.000000), REAL_FLOAT(-0.000000), REAL_FLOAT(-0.000000),
REAL_ZERO },
	{REAL_FLOAT(0.444444), REAL_FLOAT(0.352756), REAL_FLOAT(0.279982), REAL_FLOAT(0.222222), REAL_FLOAT(0.176378), REAL_FLOAT(0.139991), REAL_FLOAT(0.111111),
REAL_FLOAT(0.088189), REAL_FLOAT(0.069996), REAL_FLOAT(0.055556), REAL_FLOAT(0.044094), REAL_FLOAT(0.034998), REAL_FLOAT(0.027778), REAL_FLOAT(0.022047),
REAL_FLOAT(0.017499), REAL_FLOAT(0.013889), REAL_FLOAT(0.011024), REAL_FLOAT(0.008749), REAL_FLOAT(0.006944), REAL_FLOAT(0.005512), REAL_FLOAT(0.004375),
REAL_FLOAT(0.003472), REAL_FLOAT(0.002756), REAL_FLOAT(0.002187), REAL_FLOAT(0.001736), REAL_FLOAT(0.001378), REAL_FLOAT(0.001094), REAL_FLOAT(0.000868),
REAL_FLOAT(0.000689), REAL_FLOAT(0.000547), REAL_FLOAT(0.000434), REAL_FLOAT(0.000344), REAL_FLOAT(0.000273), REAL_FLOAT(0.000217), REAL_FLOAT(0.000172),
REAL_FLOAT(0.000137), REAL_FLOAT(0.000109), REAL_FLOAT(0.000086), REAL_FLOAT(0.000068), REAL_FLOAT(0.000054), REAL_FLOAT(0.000043), REAL_FLOAT(0.000034),
REAL_FLOAT(0.000027), REAL_FLOAT(0.000022), REAL_FLOAT(0.000017), REAL_FLOAT(0.000014), REAL_FLOAT(0.000011), REAL_FLOAT(0.000009), REAL_FLOAT(0.000007),
REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001),
REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_ZERO, REAL_ZERO, REAL_ZERO,
REAL_ZERO },
	{REAL_FLOAT(0.888889), REAL_FLOAT(0.705512), REAL_FLOAT(0.559965), REAL_FLOAT(0.444444), REAL_FLOAT(0.352756), REAL_FLOAT(0.279982), REAL_FLOAT(0.222222),
REAL_FLOAT(0.176378), REAL_FLOAT(0.139991), REAL_FLOAT(0.111111), REAL_FLOAT(0.088189), REAL_FLOAT(0.069996), REAL_FLOAT(0.055556), REAL_FLOAT(0.044094),
REAL_FLOAT(0.034998), REAL_FLOAT(0.027778), REAL_FLOAT(0.022047), REAL_FLOAT(0.017499), REAL_FLOAT(0.013889), REAL_FLOAT(0.011024), REAL_FLOAT(0.008749),
REAL_FLOAT(0.006944), REAL_FLOAT(0.005512), REAL_FLOAT(0.004375), REAL_FLOAT(0.003472), REAL_FLOAT(0.002756), REAL_FLOAT(0.002187), REAL_FLOAT(0.001736),
REAL_FLOAT(0.001378), REAL_FLOAT(0.001094), REAL_FLOAT(0.000868), REAL_FLOAT(0.000689), REAL_FLOAT(0.000547), REAL_FLOAT(0.000434), REAL_FLOAT(0.000344),
REAL_FLOAT(0.000273), REAL_FLOAT(0.000217), REAL_FLOAT(0.000172), REAL_FLOAT(0.000137), REAL_FLOAT(0.000109), REAL_FLOAT(0.000086), REAL_FLOAT(0.000068),
REAL_FLOAT(0.000054), REAL_FLOAT(0.000043), REAL_FLOAT(0.000034), REAL_FLOAT(0.000027), REAL_FLOAT(0.000022), REAL_FLOAT(0.000017), REAL_FLOAT(0.000014),
REAL_FLOAT(0.000011), REAL_FLOAT(0.000009), REAL_FLOAT(0.000007), REAL_FLOAT(0.000005), REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000003),
REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001),
REAL_ZERO },
	{REAL_FLOAT(1.777778), REAL_FLOAT(1.411023), REAL_FLOAT(1.119930), REAL_FLOAT(0.888889), REAL_FLOAT(0.705512), REAL_FLOAT(0.559965), REAL_FLOAT(0.444444),
REAL_FLOAT(0.352756), REAL_FLOAT(0.279982), REAL_FLOAT(0.222222), REAL_FLOAT(0.176378), REAL_FLOAT(0.139991), REAL_FLOAT(0.111111), REAL_FLOAT(0.088189),
REAL_FLOAT(0.069996), REAL_FLOAT(0.055556), REAL_FLOAT(0.044094), REAL_FLOAT(0.034998), REAL_FLOAT(0.027778), REAL_FLOAT(0.022047), REAL_FLOAT(0.017499),
REAL_FLOAT(0.013889), REAL_FLOAT(0.011024), REAL_FLOAT(0.008749), REAL_FLOAT(0.006944), REAL_FLOAT(0.005512), REAL_FLOAT(0.004375), REAL_FLOAT(0.003472),
REAL_FLOAT(0.002756), REAL_FLOAT(0.002187), REAL_FLOAT(0.001736), REAL_FLOAT(0.001378), REAL_FLOAT(0.001094), REAL_FLOAT(0.000868), REAL_FLOAT(0.000689),
REAL_FLOAT(0.000547), REAL_FLOAT(0.000434), REAL_FLOAT(0.000344), REAL_FLOAT(0.000273), REAL_FLOAT(0.000217), REAL_FLOAT(0.000172), REAL_FLOAT(0.000137),
REAL_FLOAT(0.000109), REAL_FLOAT(0.000086), REAL_FLOAT(0.000068), REAL_FLOAT(0.000054), REAL_FLOAT(0.000043), REAL_FLOAT(0.000034), REAL_FLOAT(0.000027),
REAL_FLOAT(0.000022), REAL_FLOAT(0.000017), REAL_FLOAT(0.000014), REAL_FLOAT(0.000011), REAL_FLOAT(0.000009), REAL_FLOAT(0.000007), REAL_FLOAT(0.000005),
REAL_FLOAT(0.000004), REAL_FLOAT(0.000003), REAL_FLOAT(0.000003), REAL_FLOAT(0.000002), REAL_FLOAT(0.000002), REAL_FLOAT(0.000001), REAL_FLOAT(0.000001),
REAL_ZERO }
};

#ifdef AUTOPC
//static int downsampleRate = DOWNSAMPLE;
#else
extern DownSampleRate g_DownSampleRate;
//static int downsampleRate = g_DownSampleRate;
#endif



void init_layer2(void)
{
  static double mulmul[27] = {
    0.0 , -2.0/3.0 , 2.0/3.0 ,
    2.0/7.0 , 2.0/15.0 , 2.0/31.0, 2.0/63.0 , 2.0/127.0 , 2.0/255.0 ,
    2.0/511.0 , 2.0/1023.0 , 2.0/2047.0 , 2.0/4095.0 , 2.0/8191.0 ,
    2.0/16383.0 , 2.0/32767.0 , 2.0/65535.0 ,
    -4.0/5.0 , -2.0/5.0 , 2.0/5.0, 4.0/5.0 ,
    -8.0/9.0 , -4.0/9.0 , -2.0/9.0 , 2.0/9.0 , 4.0/9.0 , 8.0/9.0 };
  static int base[3][9] = {
     { 1 , 0, 2 , } ,
     { 17, 18, 0 , 19, 20 , } ,
     { 21, 1, 22, 23, 0, 24, 25, 2, 26 } };
  int i,j,k,l,len;
  real *table;
  static int tablen[3] = { 3 , 5 , 9 };
  static int *itable,*tables[3] = { grp_3tab , grp_5tab , grp_9tab };

#ifdef INIT_TABLE_WRITE
  DWORD dwBytesWritten;
  char buf[100];

  HANDLE hFile = CreateFile("D:\\layer2_init.cpp",GENERIC_WRITE,0,NULL,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);
#endif

  for(i=0;i<3;i++)
  {
    itable = tables[i];
    len = tablen[i];
    for(j=0;j<len;j++)
      for(k=0;k<len;k++)
        for(l=0;l<len;l++)
        {
          *itable++ = base[i][l];
          *itable++ = base[i][k];
          *itable++ = base[i][j];
        }
  }

#if 0 //mul table already initialized

#ifdef INIT_TABLE_WRITE
  WriteFile(hFile,"{\n",2,&dwBytesWritten,NULL);
#endif

  for(k=0;k<27;k++)
  {
    double m=mulmul[k];
    table = muls[k];
#ifdef INIT_TABLE_WRITE
	WriteFile(hFile,"\t{ ",2,&dwBytesWritten,NULL);
	DWORD counter = 6;
#endif
    for(j=3,i=0;i<63;i++,j--)
	{
#ifdef INIT_TABLE_WRITE
	  double d = m * pow(2.0,double(j)/3.0);
	  if(counter--)
		vsprintf(buf,"REAL_FLOAT(%f), ",d); 
	  else
	  {
		vsprintf(buf,"REAL_FLOAT(%f),\n",d);
		counter = 6;
	  }
	  WriteFile(hFile,buf,strlen(buf),&dwBytesWritten,NULL);
	  *table++ = REAL_FLOAT(d);
#else
      *table++ = REAL_FLOAT(m * pow(2.0,(double) j / 3.0));
#endif
	}
#ifdef INIT_TABLE_WRITE
	WriteFile(hFile,"REAL_ZERO },\n",13,&dwBytesWritten,NULL);
#endif
    *table++ = REAL_ZERO;
  }
#ifdef INIT_TABLE_WRITE
  WriteFile(hFile,"};\n",3,&dwBytesWritten,NULL);
#endif

#endif // 0
}


void II_step_one(unsigned int *bit_alloc,int *scale,struct frame *fr)
{
    int stereo = fr->stereo-1;
    int sblimit = fr->II_sblimit;
    int jsbound = fr->jsbound;
    int sblimit2 = fr->II_sblimit<<stereo;
    struct al_table *alloc1 = fr->alloc;
    int i;
    static unsigned int scfsi_buf[64];
    unsigned int *scfsi,*bita;
    int sc,step;

    bita = bit_alloc;
    if(stereo)
    {
      for (i=jsbound;i;i--,alloc1+=(1<<step))
      {
        *bita++ = (char) getbits(step=alloc1->bits);
        *bita++ = (char) getbits(step);
      }
      for (i=sblimit-jsbound;i;i--,alloc1+=(1<<step))
      {
        bita[0] = (char) getbits(step=alloc1->bits);
        bita[1] = bita[0];
        bita+=2;
      }
      bita = bit_alloc;
      scfsi=scfsi_buf;
      for (i=sblimit2;i;i--)
        if (*bita++)
          *scfsi++ = (char) getbits_fast(2);
    }
    else /* mono */
    {
      for (i=sblimit;i;i--,alloc1+=(1<<step))
        *bita++ = (char) getbits(step=alloc1->bits);
      bita = bit_alloc;
      scfsi=scfsi_buf;
      for (i=sblimit;i;i--)
        if (*bita++)
          *scfsi++ = (char) getbits_fast(2);
    }

    bita = bit_alloc;
    scfsi=scfsi_buf;
    for (i=sblimit2;i;i--) 
      if (*bita++)
        switch (*scfsi++) 
        {
          case 0: 
                *scale++ = getbits_fast(6);
                *scale++ = getbits_fast(6);
                *scale++ = getbits_fast(6);
                break;
          case 1 : 
                *scale++ = sc = getbits_fast(6);
                *scale++ = sc;
                *scale++ = getbits_fast(6);
                break;
          case 2: 
                *scale++ = sc = getbits_fast(6);
                *scale++ = sc;
                *scale++ = sc;
                break;
          default:              /* case 3 */
                *scale++ = getbits_fast(6);
                *scale++ = sc = getbits_fast(6);
                *scale++ = sc;
                break;
        }

}

void II_step_two(unsigned int *bit_alloc,real fraction[2][4][SBLIMIT],int *scale,struct frame *fr,int x1)
{
    int i,j,k,ba;
    int stereo = fr->stereo;
    int sblimit = fr->II_sblimit;
    int jsbound = fr->jsbound;
    struct al_table *alloc2,*alloc1 = fr->alloc;
    unsigned int *bita=bit_alloc;
    int d1,step;

    for (i=0;i<jsbound;i++,alloc1+=(1<<step))
    {
      step = alloc1->bits;
      for (j=0;j<stereo;j++)
      {
        if ( (ba=*bita++) ) 
        {
          k=(alloc2 = alloc1+ba)->bits;
          if( (d1=alloc2->d) < 0) 
          {
            real cm=muls[k][scale[x1]];
            fraction[j][0][i] = MULT_REAL((REAL_INT ((int)getbits(k) + d1)), cm);
            fraction[j][1][i] = MULT_REAL((REAL_INT ((int)getbits(k) + d1)), cm);
            fraction[j][2][i] = MULT_REAL((REAL_INT ((int)getbits(k) + d1)), cm);
          }        
          else 
          {
            static int *table[] = { 0,0,0,grp_3tab,0,grp_5tab,0,0,0,grp_9tab };
            unsigned int idx,*tab,m=scale[x1];
            idx = (unsigned int) getbits(k);
            tab = (unsigned int *) (table[d1] + idx + idx + idx);
            fraction[j][0][i] = muls[*tab++][m];
            fraction[j][1][i] = muls[*tab++][m];
            fraction[j][2][i] = muls[*tab][m];  
          }
          scale+=3;
        }
        else
          fraction[j][0][i] = fraction[j][1][i] = fraction[j][2][i] = REAL_ZERO;
      }
    }

    for (i=jsbound;i<sblimit;i++,alloc1+=(1<<step))
    {
      step = alloc1->bits;
      bita++;	/* channel 1 and channel 2 bitalloc are the same */
      if ( (ba=*bita++) )
      {
        k=(alloc2 = alloc1+ba)->bits;
        if( (d1=alloc2->d) < 0)
        {
          real cm;
          cm=muls[k][scale[x1+3]];
          fraction[1][0][i] = MULT_REAL((fraction[0][0][i] = REAL_INT ((int)getbits(k) + d1) ), cm);
          fraction[1][1][i] = MULT_REAL((fraction[0][1][i] = REAL_INT ((int)getbits(k) + d1) ), cm);
          fraction[1][2][i] = MULT_REAL((fraction[0][2][i] = REAL_INT ((int)getbits(k) + d1) ), cm);
          cm=muls[k][scale[x1]];
          MULTEQ_REAL(fraction[0][0][i], cm); MULTEQ_REAL(fraction[0][1][i], cm); MULTEQ_REAL(fraction[0][2][i], cm);
        }
        else
        {
          static int *table[] = { 0,0,0,grp_3tab,0,grp_5tab,0,0,0,grp_9tab };
          unsigned int idx,*tab,m1,m2;
          m1 = scale[x1]; m2 = scale[x1+3];
          idx = (unsigned int) getbits(k);
          tab = (unsigned int *) (table[d1] + idx + idx + idx);
          fraction[0][0][i] = muls[*tab][m1]; fraction[1][0][i] = muls[*tab++][m2];
          fraction[0][1][i] = muls[*tab][m1]; fraction[1][1][i] = muls[*tab++][m2];
          fraction[0][2][i] = muls[*tab][m1]; fraction[1][2][i] = muls[*tab][m2];
        }
        scale+=6;
      }
      else {
        fraction[0][0][i] = fraction[0][1][i] = fraction[0][2][i] =
        fraction[1][0][i] = fraction[1][1][i] = fraction[1][2][i] = REAL_ZERO;
      }
/* 
   should we use individual scalefac for channel 2 or
   is the current way the right one , where we just copy channel 1 to
   channel 2 ?? 
   The current 'strange' thing is, that we throw away the scalefac
   values for the second channel ...!!
-> changed .. now we use the scalefac values of channel one !! 
*/
    }

    if(sblimit > (SBLIMIT>>g_DownSampleRate) )
      sblimit = SBLIMIT>>g_DownSampleRate;

    for(i=sblimit;i<SBLIMIT;i++)
      for (j=0;j<stereo;j++)
        fraction[j][0][i] = fraction[j][1][i] = fraction[j][2][i] = REAL_ZERO;

}

int do_layer2(struct frame *fr,struct audio_info_struct *ai)
{
  int clip=0;
  int i,j;
  int stereo = fr->stereo;
  real fraction[2][4][SBLIMIT]; /* pick_table clears unused subbands */
  unsigned int bit_alloc[64];
  int scale[192];
  int single = fr->single;

  if(stereo == 1 || single == 3)
    single = 0;

  II_step_one(bit_alloc, scale, fr);

  for (i=0;i<SCALE_BLOCK;i++) 
  {
    II_step_two(bit_alloc,fraction,scale,fr,i>>2);
    for (j=0;j<3;j++) 
    {
      if(single >= 0)
      {
        clip += (fr->synth_mono) (fraction[single][j],pcm_sample+pcm_point);
      }
      else {
          clip += (fr->synth) (fraction[0][j],0,pcm_sample+pcm_point);
          clip += (fr->synth) (fraction[1][j],1,pcm_sample+pcm_point);
      }
      pcm_point += fr->block_size;

//      if(pcm_point >= audiobufsize)
//		  pcm_point = 0;
//        audio_flush(ai);
    }
  }

  return clip;
}


